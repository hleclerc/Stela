class Class
    ptr ~= SI64 # pointer to C++ data
    
class Def
    ptr ~= SI64 # pointer to C++ data

class SurdefList
    ptr ~= SI64 # pointer to C++ data

class Void
    #

class Bool
    ___set_base_size_and_alig 1, 1
    def init val
        ___reassign_rec self, val
    def reassign val
        ___reassign_rec self, val
    
class SI8
    ___set_base_size_and_alig 8, 8
    def init val
        ___reassign_rec self, val
    def reassign val
        ___reassign_rec self, val
    
class PI8
    ___set_base_size_and_alig 8, 8
    def init val
        ___reassign_rec self, val
    def reassign val
        ___reassign_rec self, val
    
class SI16
    ___set_base_size_and_alig 16, 16
    def init val
        ___reassign_rec self, val
    def reassign val
        ___reassign_rec self, val
    
class PI16
    ___set_base_size_and_alig 16, 16
    def init val
        ___reassign_rec self, val
    def reassign val
        ___reassign_rec self, val
    
class SI32
    ___set_base_size_and_alig 32, 32
    def init val
        ___reassign_rec self, val
    def reassign val
        ___reassign_rec self, val

class SI64
    ___set_base_size_and_alig 64, 64
    def init val
        ___reassign_rec self, val
    def reassign val
        ___reassign_rec self, val
        
class PI32
    ___set_base_size_and_alig 32, 32
    def init val
        ___reassign_rec self, val
    def reassign val
        ___reassign_rec self, val

class PI64
    ___set_base_size_and_alig 64, 64
    def init val
        ___reassign_rec self, val
    def reassign val
        ___reassign_rec self, val

    
def add a, b
    ___add a, b

def sub a, b
    ___sub a, b

def mul a, b
    ___mul a, b

def div a, b
    ___div a, b

def mod a, b
    ___mod a, b

def self_add a, b
    a = a + b

def self_sub a, b
    a = a - b

def self_mul a, b
    a = a * b

def self_div a, b
    a = a / b

def self_mod a, b
    a = a % b

def reassign a, b
    a.reassign b

def not_boolean v
    ___not_boolean v
    
def equal a, b
    ___equ a, b
    
def superior a, b
    ___sup a, b
    
def superior_equal a, b
    ___sup_eq a, b

def inferior a, b
    ___inf a, b
    
def inferior_equal a, b
    ___inf_eq a, b

def pre_inc a
    a += 1
    
# class PI96
    # ___set_base_size_and_alig 96, 96
    
# class Inode
    # val ~= PI96
    
# class CUnsigned
    # beg ~= repeat PI8, cond = _0 >= 128
    # end ~= PI8
    
# class CString
    # size ~= CUnsigned
    # data ~= repeat PI8, size

# class Directory
    # class Item
        # name ~= CString
        # file ~= Inode
    # icon ~= CString
    # data ~= repeat Item, cond = _0.name.size
    
    # def find name
        # for item in data
            # if item.name == name
                # return item.file
        # Inode 0
        
    # def add name, inode
        # data.push_back name, inode
        # # -> data doit Ãªtre connu pour que la gÃ©nÃ©ration de code fasse appel Ã  la mÃ©thode...
    
# class Directory_RedBlack
    # class Item
        # name ~= CString
        # file ~= Inode
        # lech ~= Offset
        # rich ~= Offset
        
    # nb_items ~= CUnsigned
    # icon     ~= CString
    # data     ~= repeat Item, size = nb_items
    
    # def find name
        # for item in data
            # if item.name == name
                # return item.file
        # Inode 0
    
    # def add name, inode
        # #

# # 
# class N[ val ]

# #
# class JsHeap
    # def size
        # ___code "heap.byteLength"

# # Heap allocation
# js_heap := JsHeap()
    
# def heap_allocation size
    
# def test
    # ___code "heap.byteLength"
        
# st := ___gen_ssa_tree test
# class CString
    # size := CUInt 0
    # data := repeat PI8, n = size

# ___code "heap.byteLength"
def init self
    # init wo args -> do nothing
    
class Lambda
    ast  := 0l # pointer to Ast_Lambda
    refs := 0l # catched references
   
class Repeated
    type := 0l # pointer to type
    func := 0l # pointer to func that gives the size

class Ptr[ T ]
    addr := 0p
    
class CUInt
    data := ___repeat PI8, x => ( res := 1; while x.data[ res ] >= 128; ++res; res )
    
    static def size_init _val
        res := 1
        val := _val
        while val >= 128
            val /= 128
            ++res
        res

    def init _val
        cpt := 0
        val := _val
        while true
            data[ cpt ] = _val % 128
            if _val < 128
                break
            val /= 128
            cpt += 1
        
        
# a := CUInt 0
# ___info a
class Toto
    attr := PI16 13
    atts := PI16 26
    def select
        attr
        
a := Toto()
___info a.attr
___info a.atts
___info a
