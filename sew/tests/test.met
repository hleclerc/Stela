def add a, b
    ___add a, b

def sub a, b
    ___sub a, b

def mul a, b
    ___mul a, b

def div a, b
    ___div a, b

def mod a, b
    ___mod a, b

def self_add a, b
    a = a + b

def self_sub a, b
    a = a - b

def self_mul a, b
    a = a * b

def self_div a, b
    a = a / b

def self_mod a, b
    a = a % b

def reassign a, b
    a.reassign b

def not_boolean v
    ___not_boolean v
    
def inferior a, b
    ___inf a, b
    
def superior a, b
    ___sup a, b

class SI8
    ___set_base_size_and_alig 8, 8
    def init val
        ___reassign_rec self, val
    def reassign val
        ___disp val
        ___reassign_rec self, val
    
class PI8
    ___set_base_size_and_alig 8, 8
    def init val
        ___reassign_rec self, val
    def reassign val
        ___reassign_rec self, val
    
class SI32
    ___set_base_size_and_alig 32, 32
    def init val
        ___reassign_rec self, val
    def reassign val
        ___reassign_rec self, val

class SI64
    ___set_base_size_and_alig 64, 64
    def init val
        ___reassign_rec self, val
    def reassign val
        ___reassign_rec self, val

void := 1

class Ptr[ T ]
    adress := 0p
   
def pointer_on val
    ___pointer_on val

class Block[ sourcefile, tok, catched_vars_type, names ]
    catched_vars ~= catched_vars_type
    scope_ptr    := 0l
    def apply val
        ___block_exec self, val

def init self
    # nothing to do
    
def typeof val
    ___typeof val

def sizeof T
    ___size_of T

def aligof T
    ___alig_of T

class Range[ TB, TE, TI ]
    beg ~= TB
    end ~= TE
    inc ~= TI
    def init( b, e, i ) starts_with beg( b ), end( e ), inc( i )
        #
    def __for__ block
        cur := beg
        while cur < end
            block cur
            cur += inc
    
def range a, b
    Range[ typeof( a ), typeof( b ), typeof( a ) ]( a, b, 1 )

class Vec[ T, static_size ]
    ___set_base_size_and_alig sizeof( T ) * static_size, aligof( T )
    
    def init
        for i in self
            i.init()
    
    def init val
        for i in self
            i.init val
    
    def select i
        ___get_slice self, T, sizeof( T ) * i
        
    def __for__ block
        _for_rec block, 0
        
    def _for_rec block, i
        if i < static_size
            block select i
            _for_rec block, i + 1
    
def sys_write fd, data, size
    ___syscall SI64( 1 ), SI64( fd ), data, SI64( size )

def print val
    sit := 10
    tmp := Vec[ SI8, sit ]()
    vcp := val
    nbc := sit - 1
    tmp[ nbc ] = 10
    while true
        tmp[ nbc -= 1 ] = 48 + vcp % 10
        vcp /= 10
        if not vcp
            break
    sys_write 0, &tmp + nbc, sit - nbc

# v := Vec[ PI8, 3 ] 48
# ___syscall &v
# print 120

# ___syscall ___rand() and ___rand()

a := Vec[SI8,3]()
a[ ___rand() ] = 48
b := a
b[ ___rand() ] = 49
___syscall a, b


