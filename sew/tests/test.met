def add a, b
    ___add a, b

def self_add a, b
    a = a + b

def reassign a, b
    a.reassign b

def not_boolean v
    ___not_boolean v
    
def inferior a, b
    ___inf a, b
    
def superior a, b
    ___sup a, b
    
class SI32
    ___set_base_size_and_alig 32, 32
    def init val
        ___reassign_rec self, val
    def reassign val
        ___reassign_rec self, val

void := 1

class Ptr[ T ]
    adress := 0p

class Block[ sourcefile, tok, catched_vars_type, names ]
    catched_vars ~= catched_vars_type
    def apply val
        ___block_exec self, val

def init self
    # nothing to do
    
def typeof val
    ___typeof val

class Range[ TB, TE, TI ]
    beg ~= TB
    end ~= TE
    inc ~= TI
    def init( b, e, i ) starts_with beg( b ), end( e ), inc( i )
        #
    def __for__ block
        cur := beg
        while cur < end
            block cur
            cur += inc
    
def range a, b
    Range[ typeof( a ), typeof( b ), typeof( a ) ]( a, b, 1 )


# # for a in 0 .. 10
    # # ___info a
# a := A()
# a.pouet()
    
for i in 5 .. 10
    ___syscall i
    
    
    
    
    