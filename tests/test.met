# classes et fonctions.
# if
# fonctions -> avec scope statique, surdefs, ...
# boucles
# 
    
# MUST be defined first
class Class
    pass
    
class Def
    pass
    
# MUST be defined before any call to find_var
class Callable[ surdef_list, self_type, parm_type ]
    def select( varargs )
        ___select_SurdefList self, varargs

class SurdefList
    pass
    
# data_name -> ptr on a C string
class VarargsItemBeg[ data_type, data_name, next_type ]
    def select i
        i

class VarargsItemEnd
    def select i
        i
        

class Void
    def init
        0
    def write_to_stream os
        os << "void"

class Type
    pass

class SI8
    ___set_base_size_and_alig 8, 8
    
    def init
    
    def init val : [ SI8, SI32, SI64, PI64 ]
        ___reassign_rec val
    
    def reassign val : [ SI8, SI32, SI64, PI64 ]
        ___reassign_rec val
    

class SI32
    ___set_base_size_and_alig 32, 32
    
    def init
    
    def init val : [ SI8, SI32, SI64, PI64 ]
        ___reassign_rec val
    
    def reassign val : [ SI8, SI32, SI64, PI64 ]
        ___reassign_rec val
    
class SI64
    ___set_base_size_and_alig 64, 32
    
    def init val : [ SI8, SI32, PI32, SI64, PI64, Bool ]
        ___reassign_rec val
    
    def reassign val : [ SI8, SI32, PI32, SI64, PI64, Bool ]
        ___reassign_rec val
    
class PI64
    ___set_base_size_and_alig 64, 32
    
    def init val : PI64
        ___reassign_rec val
    
    def reassign val : PI64
        ___reassign_rec val

class Bool
    ___set_base_size_and_alig 1, 1

    def init val : [ Bool, SI32, SI64, PI64 ]
        ___reassign_rec val
    
def self_add a, b
    a = a + b


void := Void()
        
# default init, that does nothing
def init self
    # nothing :)

def add( a, b )
    ___add a, b
    
def mul( a, b )
    ___mul a, b
    
def mod( a, b )
    ___mod a, b

def not( a )
    ___not a

def not_boolean a
    ___not Bool a

def inferior a, b
    ___inf a, b

class Vec[ T, static_size ]
    ___set_base_size_and_alig ___size_of( T ) * static_size, ___alig_of( T )
    
    def init
        i := 0
        while i < static_size
            select( i ).init()
            i += 1
    
    def init val
        i := 0
        while i < static_size
            select( i ).init val
            i += 1
    
    def select i
        ___get_slice self, T, ___size_of( T ) * i
    
    
t := Vec[ SI8, 3 ]()
t[ ___rand() % 3 ] = 5
t[ ___rand() % 3 ] = 15
___syscall SI64 t[ 1 ]
# ___info t[ 1 ]
# ___info t.select 0
# ___syscall SI64 t[ 0 ]


