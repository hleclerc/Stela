# classes et fonctions.
# if
# fonctions -> avec scope statique, surdefs, ...
# boucles
# 
    
# MUST be defined first
class Class
    pass
    
class Def
    pass
    
# MUST be defined before any find_var
class Callable[ surdef_list, self_type, parm_type ]
    pass

class SurdefList
    pass
    
class Void
    def init
        0
    def write_to_stream os
        os << "void"

class Type
    pass
    
class SI32
    ___set_base_size_and_alig 32, 32
    
    def init
    
    def init val : [ SI32, SI64, PI64 ]
        ___reassign_rec val
    
    def reassign val : SI32
        ___reassign_rec val
    
class SI64
    ___set_base_size_and_alig 64, 32
    
    def init val : [ SI32, PI32, SI64, PI64 ]
        ___reassign_rec val
    
    def reassign val : [ SI32, PI32, SI64, PI64 ]
        ___reassign_rec val
    
class PI64
    ___set_base_size_and_alig 64, 32
    
    def init val : PI64
        ___reassign_rec val
    
    def reassign val : PI64
        ___reassign_rec val

class Bool
    ___set_base_size_and_alig 1, 1

    def init val : [ Bool, SI32, SI64, PI64 ]
        ___reassign_rec val
    
def self_add a, b
    a = a + b


void := Void()
        
# default init, that does nothing
def init self
    # nothing :)

class Toto
    a := 10
    def init : a( 50 ) # and b( 10 )
        r := 10

def add( a, b )
    ___add a, b
    
def mul( a, b )
    ___mul a, b
    
def mod( a, b )
    ___mod a, b

def not( a )
    ___not a

def not_boolean a
    ___not Bool a

def inferior a, b
    ___inf a, b

# r := ___rand()
# a := 10 + r
# if 10 + ___rand()
    # ___syscall 100l
    # a = 20 + r
    
# -> 
a := SI64 ___rand()
b := SI64 ___rand()
while a < b
    #while 10 # ___rand()
    ___info a
    a += 2
___syscall a
    
